{"version":3,"sources":["../../node_modules/date-fns/esm/_lib/requiredArgs/index.js","../../node_modules/date-fns/esm/toDate/index.js","../../node_modules/date-fns/esm/isValid/index.js","../../src/utils.js","../../src/index.js","render-props.js","App.js","index.js"],"names":["requiredArgs","required","args","length","TypeError","toDate","argument","arguments","argStr","Object","prototype","toString","call","Date","getTime","console","warn","Error","stack","NaN","calculateTimeLeft","date","dirtyDate","isNaN","isValid","difference","timeLeft","days","Math","hours","minutes","seconds","children","initialTimeLeft","useState","setTimeLeft","timer","useRef","useEffect","setInterval","clearInterval","isValidDate","isValidFutureDate","CountdownRenderProps","className","Fragment","role","aria-label","App","Component","ReactDOM","render","document","getElementById"],"mappings":"ovBAAe,SAASA,EAAaC,EAAUC,GAC7C,GAAIA,EAAKC,OAASF,EAChB,MAAM,IAAIG,UAAUH,EAAW,YAAcA,EAAW,EAAI,IAAW,uBAAyBC,EAAKC,OAAS,YC8BnG,SAASE,EAAOC,GAC7BN,EAAa,EAAGO,WAChB,IAAIC,EAASC,OAAOC,UAAUC,SAASC,KAAKN,GAE5C,OAAIA,aAAoBO,MAA4B,kBAAbP,GAAoC,kBAAXE,EAEvD,IAAIK,KAAKP,EAASQ,WACI,kBAAbR,GAAoC,oBAAXE,EAClC,IAAIK,KAAKP,IAES,kBAAbA,GAAoC,oBAAXE,GAAoD,qBAAZO,UAE3EA,QAAQC,KAAK,+IAEbD,QAAQC,MAAK,IAAIC,OAAQC,QAGpB,IAAIL,KAAKM,MCenB,IC9DYC,EAAoB,SAAAC,GAC/B,IDyDa,SAAiBC,GAC9BtB,EAAa,EAAGO,WAChB,IAAIc,EAAOhB,EAAOiB,GAClB,OAAQC,MAAMF,GC5DTG,CAAL,GAAoB,OAAO,KAC3B,IAAMC,EAAa,IAAIZ,KAAKQ,GAAQ,IAApC,KACIK,EAAJ,GAWA,OATID,EAAJ,IACEC,EAAW,CACTC,KAAMC,WAAWH,EAAa,OAC9BI,MAAOD,WAAYH,EAAa,KAFvB,IAGTK,QAASF,WAAYH,MAAD,GAHX,IAITM,QAASH,WAAYH,EAAD,IAAXG,MAIb,G,ECbgB,SAAC,GAAuB,IAArBP,EAAqB,EAArBA,KAAMW,EAAe,EAAfA,SACnBC,EAAkBb,EAAxB,GADwC,IAERc,mBAFQ,MAEjCR,EAFiC,KAEvBS,EAFuB,KAGlCC,EAAQC,mBAEdC,qBAAU,WAKR,OAJAF,UAAgBG,aAAY,WAC1BJ,EAAYf,EAAZe,MADFC,KAIO,gBACL,IAAIA,WACFI,cAAcJ,EAAdI,YAGH,CAVHF,IAYA,IAAIG,GAAJ,EACEC,GADF,EAMA,OAHA,OAAIhB,IAAmBe,MACnBf,QAAJ,IAAgBA,YAAgCgB,MAEzCV,EAAS,CACdS,YADc,EAEdC,kBAFc,EAGdhB,cCSWiB,EAnCc,SAAC,GAAc,IAAZtB,EAAW,EAAXA,KAC9B,OACE,yBAAKuB,UAAU,aACb,wBAAIA,UAAU,UAAd,2CACA,kBAAC,EAAD,CAAevB,KAAMA,IAClB,gBAAGK,EAAH,EAAGA,SAAUe,EAAb,EAAaA,YAAaC,EAA1B,EAA0BA,kBAA1B,OACC,kBAAC,IAAMG,SAAP,MACIJ,GAAe,4DACfC,GACA,uFAC0D,IACxD,0BAAMI,KAAK,MAAMC,aAAW,kBAA5B,iBAKHN,GAAeC,GACd,6BACE,4BAAQE,UAAU,oBAAoBlB,EAASC,KAA/C,OACA,4BAAQiB,UAAU,oBACflB,EAASG,MADZ,KACqB,KAErB,4BAAQe,UAAU,oBACflB,EAASI,QADZ,KACuB,KAEvB,4BAAQc,UAAU,oBAAoBlB,EAASK,gBCzB1CiB,E,iLAEjB,IAAM3B,EAAO,IAAIR,KAAK,cAEtB,OACE,yBAAK+B,UAAU,OACb,kBAAC,EAAD,CAAsBvB,KAAMA,IAC5B,kC,GAPyB4B,aCGjCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.5be91c64.chunk.js","sourcesContent":["export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + required > 1 ? 's' : '' + ' required, but only ' + args.length + ' present');\n  }\n}","import requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now `isValid` doesn't throw an exception\n *   if the first argument is not an instance of Date.\n *   Instead, argument is converted beforehand using `toDate`.\n *\n *   Examples:\n *\n *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |\n *   |---------------------------|---------------|---------------|\n *   | `new Date()`              | `true`        | `true`        |\n *   | `new Date('2016-01-01')`  | `true`        | `true`        |\n *   | `new Date('')`            | `false`       | `false`       |\n *   | `new Date(1488370835081)` | `true`        | `true`        |\n *   | `new Date(NaN)`           | `false`       | `false`       |\n *   | `'2016-01-01'`            | `TypeError`   | `false`       |\n *   | `''`                      | `TypeError`   | `false`       |\n *   | `1488370835081`           | `TypeError`   | `true`        |\n *   | `NaN`                     | `TypeError`   | `false`       |\n *\n *   We introduce this change to make *date-fns* consistent with ECMAScript behavior\n *   that try to coerce arguments to the expected type\n *   (which is also the case with other *date-fns* functions).\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * var result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * var result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * var result = isValid(new Date(''))\n * //=> false\n */\n\nexport default function isValid(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  return !isNaN(date);\n}","import isValid from \"date-fns/isValid\";\n\nexport const calculateTimeLeft = date => {\n  if (!isValid(date)) return null;\n  const difference = new Date(date) - new Date();\n  let timeLeft = {};\n\n  if (difference > 0) {\n    timeLeft = {\n      days: Math.floor(difference / (1000 * 60 * 60 * 24)),\n      hours: Math.floor((difference / (1000 * 60 * 60)) % 24),\n      minutes: Math.floor((difference / 1000 / 60) % 60),\n      seconds: Math.floor((difference / 1000) % 60)\n    };\n  }\n\n  return timeLeft;\n};\n","import { useState, useEffect, useRef } from \"react\";\nimport { calculateTimeLeft } from \"./utils\";\n\nconst Countdown = ({ date, children }) => {\n  const initialTimeLeft = calculateTimeLeft(date);\n  const [timeLeft, setTimeLeft] = useState(initialTimeLeft);\n  const timer = useRef();\n\n  useEffect(() => {\n    timer.current = setInterval(() => {\n      setTimeLeft(calculateTimeLeft(date));\n    }, 1000);\n\n    return () => {\n      if (timer.current !== undefined) {\n        clearInterval(timer.current);\n      }\n    };\n  }, [date]);\n\n  let isValidDate = true,\n    isValidFutureDate = true;\n\n  if (timeLeft === null) isValidDate = false;\n  if (timeLeft && timeLeft.seconds === undefined) isValidFutureDate = false;\n\n  return children({\n    isValidDate,\n    isValidFutureDate,\n    timeLeft\n  });\n};\n\nexport default Countdown;\n","import React from \"react\";\nimport DateCountdown from \"react-headless-countdown\";\n\nconst CountdownRenderProps = ({ date }) => {\n  return (\n    <div className=\"countdown\">\n      <h3 className=\"header\">Headless Countdown (using Render Props)</h3>\n      <DateCountdown date={date}>\n        {({ timeLeft, isValidDate, isValidFutureDate }) => (\n          <React.Fragment>\n            {!isValidDate && <div>Pass in a valid date props</div>}\n            {!isValidFutureDate && (\n              <div>\n                Time up, let's pass a future date to procrastinate more{\" \"}\n                <span role=\"img\" aria-label=\"sunglass-emoji\">\n                  ðŸ˜Ž\n                </span>\n              </div>\n            )}\n            {isValidDate && isValidFutureDate && (\n              <div>\n                <strong className=\"countdown-header\">{timeLeft.days} : </strong>\n                <strong className=\"countdown-header\">\n                  {timeLeft.hours} :{\" \"}\n                </strong>\n                <strong className=\"countdown-header\">\n                  {timeLeft.minutes} :{\" \"}\n                </strong>\n                <strong className=\"countdown-header\">{timeLeft.seconds}</strong>\n              </div>\n            )}\n          </React.Fragment>\n        )}\n      </DateCountdown>\n    </div>\n  );\n};\n\nexport default CountdownRenderProps;\n","import React, { Component } from \"react\";\nimport CountdownRenderProps from \"./render-props\";\n\nexport default class App extends Component {\n  render() {\n    const date = new Date(\"2021-01-01\"); // New year 2021!\n\n    return (\n      <div className=\"App\">\n        <CountdownRenderProps date={date} />\n        <hr />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}